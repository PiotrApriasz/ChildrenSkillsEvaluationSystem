@using MudBlazor

<div class="@FieldClass">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label for="@Id" class="gi-label">@Label</label>
    }

    <input id="@Id"
           class="gi-input @(HasError ? "gi-input-error" : null)"
           type="@HtmlType"
           @bind-value="CurrentValue" @bind-value:event="oninput"
           aria-invalid="@HasError"
           aria-describedby="@(HasError ? $"{Id}_err" : null)"
           required="@Required"
           disabled="@Disabled"
           @onfocus="() => _isFocused = true"
           @onblur="() => _isFocused = false" />

    @if (HasError && !string.IsNullOrWhiteSpace(ErrorText))
    {
        <div id="@($"{Id}_err")" class="gi-error">@ErrorText</div>
    }
</div>

@code {
    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public InputType InputType { get; set; } = InputType.Text;
    [Parameter] public bool Required { get; set; }
    [Parameter] public bool HasError { get; set; }
    [Parameter] public string? ErrorText { get; set; }
    [Parameter] public bool Disabled { get; set; }

    private bool _isFocused;
    private string Id { get; } = $"gi_{Guid.NewGuid():N}";
    private string HtmlType => InputType switch {
        InputType.Password => "password",
        InputType.Email    => "email",
        InputType.Number   => "number",
        _ => "text"
    };

    private string FieldClass => string.Join(" ",
        new[]
        {
            "gi-field",
            Disabled ? "gi-disabled" : null,
            _isFocused ? "is-focused" : null,
            !string.IsNullOrEmpty(Value) ? "has-value" : null,
            HasError ? "gi-has-error" : null
        }.Where(c => c is not null));

    private string CurrentValue
    {
        get => Value;
        set
        {
            if (Value == value) return;
            Value = value;
            _ = ValueChanged.InvokeAsync(value);
        }
    }
}